{
    "AwsTemplateFormatVersion" : "2010-09-09",
    "Description" : "AWS VPC template",
    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern" : "[\\x20-\\x7E]*",
            "ConstraintDescription" : "can contain only ASCII characters."
        },
        "SSHFrom" : {
            "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "BastionInstanceType" : {
            "Description" : "Bastion Host EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :  "t2.micro",
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "NATInstanceType" : {
            "Description" : "NET Device EC2 instance type",
            "Type" : "String",
            "Default" : "m1.small",
            "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        }
    },
    "Mappings" : {
        "AWSNATAMI" : {
            "us-east-1": { "AMI": "ami-0c55b159cbfafe01f" }, 
        },
        "AWSInstanceType2Arch": {
            "t2.micro": { "Arch": "64" }  
        }
        "AWSRegionArch2AMI": {
             "us-east-1": {
                    "32": "ami-0b69ea66ff7359e26", 
                    "64": "ami-0c55b159cbfafe01f",  
                    "64Cluster": "ami-0c55b159cbfafe01f",  
                    "64GPU": "ami-0c55b159cbfafe01f" 
                    }
        }
        "SubnetConfig": {
            "VPC": { "CIDR": "10.0.0.0/24" },  # VPC now has 256 total addresses
            "Public": { "CIDR": "10.0.0.0/28" },  # Public subnet with 16 addresses
            "Private": { "CIDR": "10.0.0.16/28" }  # Private subnet with 16 addresses
        }
    },
    "Resources" : {

        "VPC" : {
          "Type" : "AWS::EC2::VPC",
          "Properties" : {
            "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
            "Tags" : [
              { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
              { "Key" : "Network", "Value" : "Public" }
            ]
          }
        },
        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
              "VpcId" : { "Ref" : "VPC" },
              "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                { "Key" : "Network", "Value" : "Public" }
              ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                { "Key" : "Network", "Value" : "Public" }
              ]
            }
        },
      
        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "InternetGatewayId" : { "Ref" : "InternetGateway" }
             }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
              "VpcId" : { "Ref" : "VPC" },
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                { "Key" : "Network", "Value" : "Public" }
              ]
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
              "RouteTableId" : { "Ref" : "PublicRouteTable" },
              "DestinationCidrBlock" : "0.0.0.0/0",
              "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },   
        "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
              "SubnetId" : { "Ref" : "PublicSubnet" },
              "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        
        },
        "WebServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
            "GroupDescription" : "Allow inbound HTTP, HTTPS, and SSH traffic",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              {
                "IpProtocol" : "tcp",
                "FromPort" : "80",
                "ToPort" : "80",
                "CidrIp" : "0.0.0.0/0"
              },
              {
                "IpProtocol" : "tcp",
                "FromPort" : "443",
                "ToPort" : "443",
                "CidrIp" : "0.0.0.0/0"
              },
              {
                "IpProtocol" : "tcp",
                "FromPort" : "22",
                "ToPort" : "22",
                "CidrIp" : { "Ref" : "SSHFrom" }
              }
              ],
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                { "Key" : "Network", "Value" : "Public" }
              ]
            }
        }   
    }
    "Outputs" : {
        "VPCId" : {
          "Description" : "VPCId of the newly created VPC",
          "Value" :  { "Ref" : "VPC" }
        },
        "PublicSubnet" : {
          "Description" : "SubnetId of the public subnet",
          "Value" :  { "Ref" : "PublicSubnet" }
        },
        "PrivateSubnet" : {
          "Description" : "SubnetId of the private subnet",
          "Value" :  { "Ref" : "PrivateSubnet" }
        },
        
    }
}